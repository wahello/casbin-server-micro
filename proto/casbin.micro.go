// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: casbin.proto

package casbinpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Casbin service

type CasbinService interface {
	NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...client.CallOption) (*NewEnforcerReply, error)
	NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...client.CallOption) (*NewAdapterReply, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...client.CallOption) (*BoolReply, error)
	LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyReply, error)
	SavePolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyReply, error)
	AddPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	GetPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllActions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	HasPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
	HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error)
}

type casbinService struct {
	c    client.Client
	name string
}

func NewCasbinService(name string, c client.Client) CasbinService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "casbin"
	}
	return &casbinService{
		c:    c,
		name: name,
	}
}

func (c *casbinService) NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...client.CallOption) (*NewEnforcerReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.NewEnforcer", in)
	out := new(NewEnforcerReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...client.CallOption) (*NewAdapterReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.NewAdapter", in)
	out := new(NewAdapterReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) Enforce(ctx context.Context, in *EnforceRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.Enforce", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.LoadPolicy", in)
	out := new(EmptyReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) SavePolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*EmptyReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.SavePolicy", in)
	out := new(EmptyReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) AddPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.AddPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.AddNamedPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemovePolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveNamedPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveFilteredPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveFilteredNamedPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetNamedPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetFilteredPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetFilteredNamedPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.AddGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.AddNamedGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveNamedGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveFilteredGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.RemoveFilteredNamedGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetGroupingPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetNamedGroupingPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetFilteredGroupingPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetFilteredNamedGroupingPolicy", in)
	out := new(Array2DReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllSubjects", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllNamedSubjects", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllObjects", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllNamedObjects", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllActions(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllActions", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllNamedActions", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllRoles", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.GetAllNamedRoles", in)
	out := new(ArrayReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) HasPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.HasPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.HasNamedPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.HasGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinService) HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...client.CallOption) (*BoolReply, error) {
	req := c.c.NewRequest(c.name, "Casbin.HasNamedGroupingPolicy", in)
	out := new(BoolReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Casbin service

type CasbinHandler interface {
	NewEnforcer(context.Context, *NewEnforcerRequest, *NewEnforcerReply) error
	NewAdapter(context.Context, *NewAdapterRequest, *NewAdapterReply) error
	Enforce(context.Context, *EnforceRequest, *BoolReply) error
	LoadPolicy(context.Context, *EmptyRequest, *EmptyReply) error
	SavePolicy(context.Context, *EmptyRequest, *EmptyReply) error
	AddPolicy(context.Context, *PolicyRequest, *BoolReply) error
	AddNamedPolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemovePolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemoveNamedPolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest, *BoolReply) error
	RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest, *BoolReply) error
	GetPolicy(context.Context, *EmptyRequest, *Array2DReply) error
	GetNamedPolicy(context.Context, *PolicyRequest, *Array2DReply) error
	GetFilteredPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	AddGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
	AddNamedGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemoveGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemoveNamedGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
	RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest, *BoolReply) error
	RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest, *BoolReply) error
	GetGroupingPolicy(context.Context, *EmptyRequest, *Array2DReply) error
	GetNamedGroupingPolicy(context.Context, *PolicyRequest, *Array2DReply) error
	GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetAllSubjects(context.Context, *EmptyRequest, *ArrayReply) error
	GetAllNamedSubjects(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllObjects(context.Context, *EmptyRequest, *ArrayReply) error
	GetAllNamedObjects(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllActions(context.Context, *EmptyRequest, *ArrayReply) error
	GetAllNamedActions(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllRoles(context.Context, *EmptyRequest, *ArrayReply) error
	GetAllNamedRoles(context.Context, *SimpleGetRequest, *ArrayReply) error
	HasPolicy(context.Context, *PolicyRequest, *BoolReply) error
	HasNamedPolicy(context.Context, *PolicyRequest, *BoolReply) error
	HasGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
	HasNamedGroupingPolicy(context.Context, *PolicyRequest, *BoolReply) error
}

func RegisterCasbinHandler(s server.Server, hdlr CasbinHandler, opts ...server.HandlerOption) error {
	type casbin interface {
		NewEnforcer(ctx context.Context, in *NewEnforcerRequest, out *NewEnforcerReply) error
		NewAdapter(ctx context.Context, in *NewAdapterRequest, out *NewAdapterReply) error
		Enforce(ctx context.Context, in *EnforceRequest, out *BoolReply) error
		LoadPolicy(ctx context.Context, in *EmptyRequest, out *EmptyReply) error
		SavePolicy(ctx context.Context, in *EmptyRequest, out *EmptyReply) error
		AddPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		AddNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemovePolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error
		RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error
		GetPolicy(ctx context.Context, in *EmptyRequest, out *Array2DReply) error
		GetNamedPolicy(ctx context.Context, in *PolicyRequest, out *Array2DReply) error
		GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error
		GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error
		AddGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error
		RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error
		GetGroupingPolicy(ctx context.Context, in *EmptyRequest, out *Array2DReply) error
		GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *Array2DReply) error
		GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error
		GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error
		GetAllSubjects(ctx context.Context, in *EmptyRequest, out *ArrayReply) error
		GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error
		GetAllObjects(ctx context.Context, in *EmptyRequest, out *ArrayReply) error
		GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error
		GetAllActions(ctx context.Context, in *EmptyRequest, out *ArrayReply) error
		GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error
		GetAllRoles(ctx context.Context, in *EmptyRequest, out *ArrayReply) error
		GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error
		HasPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		HasNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		HasGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
		HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error
	}
	type Casbin struct {
		casbin
	}
	h := &casbinHandler{hdlr}
	return s.Handle(s.NewHandler(&Casbin{h}, opts...))
}

type casbinHandler struct {
	CasbinHandler
}

func (h *casbinHandler) NewEnforcer(ctx context.Context, in *NewEnforcerRequest, out *NewEnforcerReply) error {
	return h.CasbinHandler.NewEnforcer(ctx, in, out)
}

func (h *casbinHandler) NewAdapter(ctx context.Context, in *NewAdapterRequest, out *NewAdapterReply) error {
	return h.CasbinHandler.NewAdapter(ctx, in, out)
}

func (h *casbinHandler) Enforce(ctx context.Context, in *EnforceRequest, out *BoolReply) error {
	return h.CasbinHandler.Enforce(ctx, in, out)
}

func (h *casbinHandler) LoadPolicy(ctx context.Context, in *EmptyRequest, out *EmptyReply) error {
	return h.CasbinHandler.LoadPolicy(ctx, in, out)
}

func (h *casbinHandler) SavePolicy(ctx context.Context, in *EmptyRequest, out *EmptyReply) error {
	return h.CasbinHandler.SavePolicy(ctx, in, out)
}

func (h *casbinHandler) AddPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.AddPolicy(ctx, in, out)
}

func (h *casbinHandler) AddNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.AddNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) RemovePolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemovePolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveFilteredPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveFilteredNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) GetPolicy(ctx context.Context, in *EmptyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetPolicy(ctx, in, out)
}

func (h *casbinHandler) GetNamedPolicy(ctx context.Context, in *PolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetFilteredPolicy(ctx, in, out)
}

func (h *casbinHandler) GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetFilteredNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) AddGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.AddGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.AddNamedGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveNamedGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveFilteredGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.RemoveFilteredNamedGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) GetGroupingPolicy(ctx context.Context, in *EmptyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetNamedGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetFilteredGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, out *Array2DReply) error {
	return h.CasbinHandler.GetFilteredNamedGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) GetAllSubjects(ctx context.Context, in *EmptyRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllSubjects(ctx, in, out)
}

func (h *casbinHandler) GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedSubjects(ctx, in, out)
}

func (h *casbinHandler) GetAllObjects(ctx context.Context, in *EmptyRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllObjects(ctx, in, out)
}

func (h *casbinHandler) GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedObjects(ctx, in, out)
}

func (h *casbinHandler) GetAllActions(ctx context.Context, in *EmptyRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllActions(ctx, in, out)
}

func (h *casbinHandler) GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedActions(ctx, in, out)
}

func (h *casbinHandler) GetAllRoles(ctx context.Context, in *EmptyRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllRoles(ctx, in, out)
}

func (h *casbinHandler) GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, out *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedRoles(ctx, in, out)
}

func (h *casbinHandler) HasPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.HasPolicy(ctx, in, out)
}

func (h *casbinHandler) HasNamedPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.HasNamedPolicy(ctx, in, out)
}

func (h *casbinHandler) HasGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.HasGroupingPolicy(ctx, in, out)
}

func (h *casbinHandler) HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, out *BoolReply) error {
	return h.CasbinHandler.HasNamedGroupingPolicy(ctx, in, out)
}
